name: Build

on: [push]

jobs:
  client:
    strategy:
      matrix:
        node-version:
          - '14.x'
        os:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      with:
        path: "**/node_modules"
        key: ${{ runner.os }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-node_modules-
    - run: npm install
    - name: Typecheck with TypeScript
      run: npm run typecheck
    - name: Build client bundles
      run: npm run build --no-typecheck
    - name: Build JavaScript module
      run: npm run build-module --no-typecheck
    - name: Build Python client bundles
      run: npm run build-python --no-typecheck
    - run: sudo apt-get install xvfb
      if: startsWith(runner.os, 'Linux')
    - name: Run JavaScript tests (including WebGL)
      # Swiftshader, used by Chrome headless, crashes when running Neuroglancer
      # tests.
      #
      # The only reliable headless configuration is Firefox on Linux under
      # xvfb-run, which uses Mesa software rendering.
      if: startsWith(runner.os, 'Linux')
      run: xvfb-run --auto-servernum --server-args='-screen 0 1024x768x24' npm run test -- --browsers Firefox
    - name: Run JavaScript tests (excluding WebGL)
      if: ${{ !startsWith(runner.os, 'Linux') }}
      run: npm run test -- --browsers ChromeHeadless --define=NEUROGLANCER_SKIP_WEBGL_TESTS
    - name: Run JavaScript benchmarks
      run: npm run benchmark
  python:
    strategy:
      matrix:
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
        node-version:
          - '14.x'
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: "**/node_modules"
        key: ${{ runner.os }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.node-version }}-node_modules-
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"          
    - uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('python/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    - run: npm install
    - run: npm run build-python -- --no-typecheck
    - name: Build and install Python package
      working-directory: python
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy pytest-rerunfailures pytest-timeout
        pip install .[test]
    - run: sudo apt-get install xvfb
      if: ${{ startsWith(runner.os, 'Linux') }}
    # Uncomment the action below for an interactive shell
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    - name: Test with pytest (including web browser tests)
      working-directory: python/tests
      run: xvfb-run --auto-servernum --server-args='-screen 0 1024x768x24' pytest --browser=firefox -vv -s --reruns 5 --timeout=30
      env:
        PYTHONUNBUFFERED: 1
      if: ${{ startsWith(runner.os, 'Linux') }}
    - name: Test with pytest (excluding web browser tests)
      working-directory: python/tests
      run: pytest -vv -s --skip-browser-tests
      env:
        PYTHONUNBUFFERED: 1
      if: ${{ !startsWith(runner.os, 'Linux') }}
  ngauth:
    strategy:
      matrix:
        go-version: ['1.14']
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.go-version }}-go-        
    - run: go build .
      working-directory: ngauth_server
